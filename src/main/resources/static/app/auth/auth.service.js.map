{"version":3,"file":"auth.service.js","sourceRoot":"","sources":["file:///C:/Users/Bogomil Dimitrov/WebstormProjects/PaysafeInternsTimeTracking/tmp/broccoli_type_script_compiler-input_base_path-zea9Kagh.tmp/0/src/app/auth/auth.service.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,qBAAmC,eAAe,CAAC,CAAA;AAGnD,QAAO,wBAAwB,CAAC,CAAA;AAChC,QAAO,sBAAsB,CAAC,CAAA;AAC9B,QAAO,yBAAyB,CAAC,CAAA;AACjC,8BAA2B,+BAG3B,CAAC,CAHyD;AAI1D;IAMI,qBAAoB,YAA0B;QAA1B,iBAAY,GAAZ,YAAY,CAAc;QAC1C,YAAY;QACZ,IAAI,CAAC,YAAY,CAAC,QAAQ,GAAG,8CAA8C,CAAC;QAE5E,qDAAqD;QACrD,IAAI,CAAC,YAAY,CAAC,WAAW,GAAG,MAAM,CAAC,QAAQ,CAAC,MAAM,GAAG,GAAG,CAAC;QAE7D,6DAA6D;QAC7D,IAAI,CAAC,YAAY,CAAC,QAAQ,GAAG,0EAA0E,CAAC;QAExG,8DAA8D;QAC9D,IAAI,CAAC,YAAY,CAAC,KAAK,GAAG,sBAAsB,CAAC;QAEjD,wFAAwF;QACxF,4BAA4B;QAC5B,IAAI,CAAC,YAAY,CAAC,IAAI,GAAG,IAAI,CAAC;QAE9B,wFAAwF;QACxF,0BAA0B;QAC1B,IAAI,CAAC,YAAY,CAAC,UAAU,CAAC,cAAc,CAAC,CAAC;QAE7C,yFAAyF;QACzF,IAAI,CAAC,YAAY,CAAC,SAAS,GAAG,oCAAoC,CAAC;QAEnE,gEAAgE;QAChE,yDAAyD;QACzD,+BAA+B;QAC/B,IAAI,CAAC,YAAY,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC;QAE/B,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,YAAY,CAAC,cAAc,EAAE,CAAC;IACzD,CAAC;IAED,2BAAK,GAAL;QACI,IAAI,CAAC,YAAY,CAAC,gBAAgB,EAAE,CAAC;IACzC,CAAC;IAED,4BAAM,GAAN;QAAA,iBAKC;QAJG,MAAM,CAAC,IAAI,OAAO,CAAC,UAAC,OAAO;YACvB,KAAI,CAAC,YAAY,CAAC,MAAM,EAAE,CAAC;YAC3B,OAAO,EAAE,CAAC;QACd,CAAC,CAAC,CAAC,IAAI,CAAC,cAAK,KAAI,CAAC,UAAU,GAAG,KAAK,CAAC,CAAA,CAAC,CAAC,CAAC;IAC5C,CAAC;IAED,oCAAc,GAAd;QACE,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC,cAAc,EAAE,CAAC;IAC5C,CAAC;IApDL;QAAC,iBAAU,EAAE;;mBAAA;IAqDb,kBAAC;AAAD,CAAC,AApDD,IAoDC;AApDY,mBAAW,cAoDvB,CAAA","sourcesContent":["import { Injectable, OnInit } from '@angular/core';\n\nimport { Observable } from 'rxjs/Observable';\nimport 'rxjs/add/observable/of';\nimport 'rxjs/add/operator/do';\nimport 'rxjs/add/operator/delay';\nimport {OAuthService} from 'angular2-oauth2/oauth-service'\n\n\n@Injectable()\nexport class AuthService {\n    isLoggedIn: boolean;\n\n    // store the URL so we can redirect after logging in\n    redirectUrl: string;\n\n    constructor(private oAuthService: OAuthService) {\n        // Login-Url\n        this.oAuthService.loginUrl = 'https://accounts.google.com/o/oauth2/v2/auth';\n\n        // URL of the SPA to redirect the user to after login\n        this.oAuthService.redirectUri = window.location.origin + '/';\n\n        // The SPA's id. Register SPA with this id at the auth-server\n        this.oAuthService.clientId = '943782333645-mtostmvv8v7vja3dj9nof48dii30st3k.apps.googleusercontent.com';\n\n        // set the scope for the permissions the client should request\n        this.oAuthService.scope = 'openid profile email';\n\n        // set to true, to receive also an id_token via OpenId Connect (OIDC) in addition to the\n        // OAuth2-based access_token\n        this.oAuthService.oidc = true;\n\n        // Use setStorage to use sessionStorage or another implementation of the TS-type Storage\n        // instead of localStorage\n        this.oAuthService.setStorage(sessionStorage);\n\n        // To also enable single-sign-out set the url for your auth-server's logout-endpoint here\n        this.oAuthService.logoutUrl = 'https://accounts.google.com/logout';\n\n        // This method just tries to parse the token within the url when\n        // the auth-server redirects the user back to the web-app\n        // It dosn't initiate the login\n        this.oAuthService.tryLogin({});\n\n        this.isLoggedIn = this.oAuthService.getAccessToken();\n    }\n\n    login() {\n        this.oAuthService.initImplicitFlow();\n    }\n\n    logout() {\n        return new Promise((resolve) => {\n            this.oAuthService.logOut();\n            resolve();\n        }).then(()=>{this.isLoggedIn = false;});\n    }\n\n    getAccessToken() {\n      return this.oAuthService.getAccessToken();\n    }\n}\n"]}