{"version":3,"file":"task.component.js","sourceRoot":"","sources":["file:///C:/WorkspaceProjectTimeFrontEnd/time-tracker-frontend/tmp/broccoli_type_script_compiler-input_base_path-PrQq698J.tmp/0/src/app/task/task.component.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,qBAAiE,eAAe,CAAC,CAAA;AACjF,qBAAmB,QAAQ,CAAC,CAAA;AAC5B,6BAA0B,gBAAgB,CAAC,CAAA;AAC3C,8BAA2B,iBAAiB,CAAC,CAAA;AAE7C;;;;;;GAMG;AAUH;IAMI,uBAAoB,WAAwB,EAChC,SAAqB;QADb,gBAAW,GAAX,WAAW,CAAa;QAChC,cAAS,GAAT,SAAS,CAAY;QALvB,gBAAW,GAAG,IAAI,mBAAY,EAAW,CAAC;QAMhD,IAAI,CAAC,UAAU,GAAG,SAAS,CAAC;IAChC,CAAC;IAED;;OAEG;IACH,qCAAa,GAAb,UAAc,KAAU;QACpB,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC;IAC9B,CAAC;IAED;;OAEG;IACH,kCAAU,GAAV,UAAW,MAAc;QAAzB,iBAUC;QATG,IAAI,CAAC,WAAW;aACX,cAAc,CAAC,MAAM,CAAC;aACtB,IAAI,CAAC,UAAA,IAAI;YACN,KAAI,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QAChC,CAAC,CAAC;aACD,KAAK,CAAC,UAAA,KAAK;YACR,OAAO,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;YACrB,KAAI,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QAChC,CAAC,CAAC,CAAC;IACX,CAAC;IAED;;;OAGG;IACH,mCAAW,GAAX,UAAY,KAAK;QACb,IAAI,gBAAgB,GAAG,KAAK,CAAC,MAAM,CAAC;QACpC,IAAI,MAAM,GAAG,KAAK,CAAC;QACnB,GAAG,CAAC;YACA,EAAE,CAAC,CAAC,gBAAgB,KAAK,IAAI,CAAC,UAAU,CAAC,aAAa,CAAC,CAAC,CAAC;gBACrD,MAAM,GAAG,IAAI,CAAC;YAClB,CAAC;YACD,gBAAgB,GAAG,gBAAgB,CAAC,UAAU,CAAC;QACnD,CAAC,QAAQ,gBAAgB,EAAE;QAC3B,EAAE,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC;YACV,IAAI,CAAC,aAAa,GAAG,KAAK,CAAC;QAC/B,CAAC;IACL,CAAC;IAhDD;QAAC,YAAK,EAAE;;+CAAA;IACR;QAAC,aAAM,EAAE;;sDAAA;IAXb;QAAC,gBAAS,CAAC;YACP,QAAQ,EAAE,MAAM,CAAC,EAAE;YACnB,QAAQ,EAAE,MAAM;YAChB,WAAW,EAAE,qBAAqB;YAClC,KAAK,EAAE,CAAC,4BAAY,CAAC;YACrB,IAAI,EAAE;gBACF,kBAAkB,EAAE,qBAAqB;aAC5C;SACJ,CAAC;;qBAAA;IAmDF,oBAAC;AAAD,CAAC,AAlDD,IAkDC;AAlDY,qBAAa,gBAkDzB,CAAA","sourcesContent":["import {Component, Input, Output, EventEmitter, ElementRef} from \"@angular/core\";\r\nimport {Task} from \"./task\";\r\nimport {TaskService} from \"./task.service\";\r\nimport {DurationPipe} from \"./duration.pipe\";\r\n\r\n/**\r\n * Represents a component which renders a single Task.\r\n * The task to be render is passed by a property binding\r\n * from the parent component {@link TaskListComponent} to\r\n * the Input field project.\r\n * @class\r\n */\r\n@Component({\r\n    moduleId: module.id,\r\n    selector: 'task',\r\n    templateUrl: 'task.component.html',\r\n    pipes: [DurationPipe],\r\n    host: {\r\n        '(document:click)': 'handleClick($event)'\r\n    }\r\n})\r\nexport class TaskComponent {\r\n    @Input() task: Task;\r\n    @Output() taskDeleted = new EventEmitter<boolean>();\r\n    confirmDelete: boolean;\r\n    public elementRef;\r\n\r\n    constructor(private taskService: TaskService,\r\n        private myElement: ElementRef) {\r\n        this.elementRef = myElement;\r\n    }\r\n\r\n    /**\r\n     * Initiates the deletion of a tasks. Displays the confirmation dialog for deletion.\r\n     */\r\n    onClickDelete(event: any) {\r\n        this.confirmDelete = true;\r\n    }\r\n\r\n    /**\r\n     * Deletes the task after user confirmation. \r\n     */\r\n    deleteTask(taskId: number) {\r\n        this.taskService\r\n            .deleteTaskById(taskId)\r\n            .then(resp => {\r\n                this.taskDeleted.emit(true);\r\n            })\r\n            .catch(error => {\r\n                console.error(error);\r\n                this.taskDeleted.emit(true);\r\n            });\r\n    }\r\n\r\n    /**\r\n     * Listens for click events in and outside of this component.\r\n     * We use it to hide the deletion dialog of current task.\r\n     */\r\n    handleClick(event) {\r\n        var clickedComponent = event.target;\r\n        var inside = false;\r\n        do {\r\n            if (clickedComponent === this.elementRef.nativeElement) {\r\n                inside = true;\r\n            }\r\n            clickedComponent = clickedComponent.parentNode;\r\n        } while (clickedComponent);\r\n        if (!inside) {\r\n            this.confirmDelete = false;\r\n        }\r\n    }\r\n}"]}