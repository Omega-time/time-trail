{"version":3,"file":"task-form.component.js","sourceRoot":"","sources":["file:///C:/Users/gratsielazhelyazkova/workspace/time-tracker-frontend/tmp/broccoli_type_script_compiler-input_base_path-26SQqwme.tmp/0/src/app/task/task-form.component.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,qBAA6D,eAAe,CAAC,CAAA;AAC7E,qBAAmB,QAAQ,CAAC,CAAA;AAC5B,6BAA0B,gBAAgB,CAAC,CAAA;AAE3C;;;;;GAKG;AASH;IAUI,2BAAoB,WAAwB;QAAxB,gBAAW,GAAX,WAAW,CAAa;QAP5C,aAAQ,GAAG;YACP,KAAK,EAAE,CAAC;YACR,OAAO,EAAE,CAAC;SACb,CAAA;QACS,iBAAY,GAAG,IAAI,mBAAY,EAAW,CAAC;QACrD,WAAM,GAAG,IAAI,CAAC;IAGd,CAAC;IAED;;;;;OAKG;IACH,oCAAQ,GAAR;QACI,IAAI,CAAC,SAAS,EAAE,CAAC;IACrB,CAAC;IAED;;;;OAIG;IACH,mCAAO,GAAP;QAAA,iBAQC;QAPG,IAAI,CAAC,eAAe,CAAC,gBAAgB,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;QACrD,IAAI,CAAC,WAAW,CAAC,QAAQ,CAAC,IAAI,CAAC,eAAe,EAAE,IAAI,CAAC,SAAS,CAAC;aAC1D,IAAI,CAAC,UAAA,IAAI;YACN,KAAI,CAAC,YAAY,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YAC7B,KAAI,CAAC,SAAS,EAAE,CAAC;QACrB,CAAC,CAAC;aACD,KAAK,CAAC,UAAA,GAAG,IAAI,OAAA,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,EAAhB,CAAgB,CAAC,CAAC;IACxC,CAAC;IAED;;OAEG;IACH,qCAAS,GAAT;QAAA,iBAIC;QAHG,IAAI,CAAC,eAAe,GAAG,WAAI,CAAC,eAAe,EAAE,CAAC;QAC9C,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC;QACpB,UAAU,CAAC,cAAM,OAAA,KAAI,CAAC,MAAM,GAAG,IAAI,EAAlB,CAAkB,EAAE,CAAC,CAAC,CAAC;IAC5C,CAAC;IA3CD;QAAC,YAAK,EAAE;;wDAAA;IAKR;QAAC,aAAM,EAAE;;2DAAA;IAfb;QAAC,gBAAS,CAAC;YACP,QAAQ,EAAE,MAAM,CAAC,EAAE;YACnB,QAAQ,EAAE,WAAW;YACrB,WAAW,EAAE,0BAA0B;YACvC,SAAS,EAAE,CAAC,0BAAW,CAAC;SAE3B,CAAC;;yBAAA;IAgDF,wBAAC;AAAD,CAAC,AA9CD,IA8CC;AA9CY,yBAAiB,oBA8C7B,CAAA","sourcesContent":["import {Component, OnInit, EventEmitter, Output, Input} from \"@angular/core\";\r\nimport {Task} from \"./task\";\r\nimport {TaskService} from \"./task.service\";\r\n\r\n/**\r\n * Represents a form which sends a new task to\r\n * the {@link TaskService} for storage.\r\n * Uses dependency injection for the service providers.\r\n * @class\r\n */\r\n@Component({\r\n    moduleId: module.id,\r\n    selector: 'task-form',\r\n    templateUrl: 'task-form.component.html',\r\n    providers: [TaskService],\r\n\r\n})\r\n\r\nexport class TaskFormComponent implements OnInit {\r\n    taskToBeCreated: Task;\r\n    @Input() projectId: number;\r\n    duration = {\r\n        hours: 0,\r\n        minutes: 0\r\n    }\r\n    @Output() newTaskAdded = new EventEmitter<boolean>();\r\n    active = true;\r\n\r\n    constructor(private taskService: TaskService) {\r\n    }\r\n\r\n    /**\r\n     * Implemented method from {@link OnInit} interface which\r\n     * is called after the constructor of the class. Here\r\n     * we instantiate the taskToBeCreated with an empty\r\n     * Task object through the {@link formReset}.\r\n     */\r\n    ngOnInit() {\r\n        this.formReset();\r\n    }\r\n\r\n    /**\r\n     * EventHandler method which is called when the Add new task\r\n     * button is clicked. The method calls the service to store\r\n     * the taskToBeCreated object.\r\n     */\r\n    addTask() {\r\n        this.taskToBeCreated.setTotalDuration(this.duration);\r\n        this.taskService.saveTask(this.taskToBeCreated, this.projectId)\r\n            .then(resp => {\r\n                this.newTaskAdded.emit(true);\r\n                this.formReset();\r\n            })\r\n            .catch(err => console.log(err));\r\n    }\r\n\r\n    /**\r\n     * Resets the Add Task form by giving taskToBeCreated an empty Task object. \r\n     */\r\n    formReset() {\r\n        this.taskToBeCreated = Task.createEmptyTask();\r\n        this.active = false;\r\n        setTimeout(() => this.active = true, 0);\r\n    }\r\n}\r\n"]}