{"version":3,"file":"task.service.js","sourceRoot":"","sources":["file:///C:/WorkspaceProjectTimeFrontEnd/time-tracker-frontend/tmp/broccoli_type_script_compiler-input_base_path-PrQq698J.tmp/0/src/app/task/task.service.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,qBAAyB,eAAe,CAAC,CAAA;AACzC,qBAA8B,eAAe,CAAC,CAAA;AAC9C,6BAA0B,sBAAsB,CAAC,CAAA;AACjD,qBAAmB,QAAQ,CAAC,CAAA;AAC5B,QAAO,SAAS,CAAC,CAAA;AAEjB;;;;;;GAMG;AAEH;IAII,qBAAoB,IAAU,EAAU,WAAwB;QAA5C,SAAI,GAAJ,IAAI,CAAM;QAAU,gBAAW,GAAX,WAAW,CAAa;QAHxD,oBAAe,GAAG,iCAAiC,CAAC;QACpD,mBAAc,GAAG,gCAAgC,CAAC;IAG1D,CAAC;IAED,+CAAyB,GAAzB,UAA0B,OAAiB;QACvC,IAAI,WAAW,GAAG,OAAO,IAAI,IAAI,cAAO,EAAE,CAAC;QAC3C,WAAW,CAAC,MAAM,CAAC,eAAe,EAAE,SAAS,GAAG,IAAI,CAAC,WAAW,CAAC,cAAc,EAAE,CAAC,CAAC;QACnF,MAAM,CAAC,WAAW,CAAC;IACvB,CAAC;IAED;;;OAGG;IACH,4CAAsB,GAAtB,UAAuB,SAAiB;QACpC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,eAAe,GAAG,OAAI,SAAS,CAAE,EAAE;YACzD,OAAO,EAAE,IAAI,CAAC,yBAAyB,EAAE;SAC5C,CAAC;aACG,GAAG,CAAC,UAAA,QAAQ,IAAI,OAAA,QAAQ,CAAC,IAAI,EAAE,EAAf,CAAe,CAAC;aAChC,GAAG,CAAC,UAAA,KAAK,IAAI,OAAA,KAAK,CAAC,GAAG,CACnB,UAAA,IAAI,IAAI,OAAA,WAAI,CAAC,sBAAsB,CAAC,IAAI,CAAC,EAAjC,CAAiC,CAC5C,EAFa,CAEb,CAAC;aACD,SAAS,EAAE,CAAC;IACrB,CAAC;IAED;;;;OAIG;IACH,iCAAW,GAAX,UAAY,EAAU;QAClB,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,cAAc,GAAG,OAAI,EAAE,CAAE,EAAE;YACjD,OAAO,EAAE,IAAI,CAAC,yBAAyB,EAAE;SAC5C,CAAC;aACG,GAAG,CAAC,UAAA,QAAQ,IAAI,OAAA,QAAQ,CAAC,IAAI,EAAE,EAAf,CAAe,CAAC;aAChC,GAAG,CAAC,UAAA,IAAI,IAAI,OAAA,WAAI,CAAC,sBAAsB,CAAC,IAAI,CAAC,EAAjC,CAAiC,CAAC;aAC9C,SAAS,EAAE,CAAC;IACrB,CAAC;IAED;;;;;OAKG;IACH,oCAAc,GAAd,UAAe,EAAU;QACrB,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,cAAc,GAAG,OAAI,EAAE,CAAE,EAAE;YACpD,OAAO,EAAE,IAAI,CAAC,yBAAyB,EAAE;SAC5C,CAAC;aACG,GAAG,CAAC,UAAA,QAAQ,IAAI,OAAA,QAAQ,CAAC,IAAI,EAAE,EAAf,CAAe,CAAC;aAChC,SAAS,EAAE,CAAC;IACrB,CAAC;IAED;;;;;OAKG;IACH,8BAAQ,GAAR,UAAS,IAAU,EAAE,EAAU;QAC3B,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,eAAe,GAAG,OAAI,EAAE,CAAE,EAAE,IAAI,EAAE;YACzD,OAAO,EAAE,IAAI,CAAC,yBAAyB,EAAE;SAC5C,CAAC;aACG,GAAG,CAAC,UAAA,QAAQ,IAAI,OAAA,QAAQ,CAAC,IAAI,EAAE,EAAf,CAAe,CAAC;aAChC,SAAS,EAAE,CAAC;IACrB,CAAC;IArEL;QAAC,iBAAU,EAAE;;mBAAA;IAsEb,kBAAC;AAAD,CAAC,AArED,IAqEC;AArEY,mBAAW,cAqEvB,CAAA","sourcesContent":["import {Injectable} from \"@angular/core\";\r\nimport { Http, Headers } from \"@angular/http\";\r\nimport {AuthService} from \"../auth/auth.service\";\r\nimport {Task} from \"./task\";\r\nimport 'rxjs/Rx';\r\n\r\n/**\r\n * Class which handles all HTTP requests to the\r\n * business layer. It stores and retrieves {@link Task}\r\n * objects. Uses map method to parse JSON strings to Task\r\n * instances.\r\n * @class\r\n */\r\n@Injectable()\r\nexport class TaskService {\r\n    private tasksServiceUrl = 'http://localhost:8080/api/tasks';\r\n    private taskServiceUrl = 'http://localhost:8080/api/task';\r\n\r\n    constructor(private http: Http, private authService: AuthService) {\r\n    }\r\n\r\n    createAuthorizationHeader(headers?: Headers): Headers {\r\n        let authHeaders = headers || new Headers();\r\n        authHeaders.append('Authorization', 'Bearer ' + this.authService.getAccessToken());\r\n        return authHeaders;\r\n    }\r\n\r\n    /**\r\n     * Retrieves all tasks for a given project from the business layer.\r\n     * @returns {Task<Task[]>} a promise which holds an array of Tasks objects\r\n     */\r\n    getAllTasksByProjectId(projectId: number): Promise<Task[]> {\r\n        return this.http.get(this.tasksServiceUrl + `/${projectId}`, {\r\n            headers: this.createAuthorizationHeader()\r\n        })\r\n            .map(response => response.json())\r\n            .map(tasks => tasks.map(\r\n                task => Task.parseInputObjectToTask(task)\r\n            ))\r\n            .toPromise();\r\n    }\r\n\r\n    /**\r\n     * Retrieves a single task object by a given id.\r\n     * @param id the id by which it searches\r\n     * @returns {Promise<Task>} a promise which holds a single task object\r\n     */\r\n    getTaskById(id: number): Promise<Task> {\r\n        return this.http.get(this.taskServiceUrl + `/${id}`, {\r\n            headers: this.createAuthorizationHeader()\r\n        })\r\n            .map(response => response.json())\r\n            .map(task => Task.parseInputObjectToTask(task))\r\n            .toPromise();\r\n    }\r\n\r\n    /**\r\n     * Deletes a single task object by a given id.\r\n     * @param id the id by which it deletes the task\r\n     * @returns {Promise<Object>} a promise which holds an anonymous object\r\n     *                            which holds a response.\r\n     */\r\n    deleteTaskById(id: number): Promise<Object> {\r\n        return this.http.delete(this.taskServiceUrl + `/${id}`, {\r\n            headers: this.createAuthorizationHeader()\r\n        })\r\n            .map(response => response.json())\r\n            .toPromise();\r\n    }\r\n\r\n    /**\r\n     * Stores a task in the business layer.\r\n     * @param task the task to be stored\r\n     * @returns {Promise<Object>} a promise which holds an anonymous object\r\n     *                            which holds the new task id\r\n     */\r\n    saveTask(task: Task, id: number): Promise<Object> {\r\n        return this.http.post(this.tasksServiceUrl + `/${id}`, task, {\r\n            headers: this.createAuthorizationHeader()\r\n        })\r\n            .map(response => response.json())\r\n            .toPromise();\r\n    }\r\n}"]}