{"version":3,"file":"file-upload-form.component.js","sourceRoot":"","sources":["file:///C:/WorkspaceProjectTimeFrontEnd/time-tracker-frontend/tmp/broccoli_type_script_compiler-input_base_path-PrQq698J.tmp/0/src/app/file/file-upload-form.component.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,qBAA6D,eAAe,CAAC,CAAA;AAC7E,gCAAyE,iBAAiB,CAAC,CAAA;AAC3F,qBAA8B,eAAe,CAAC,CAAA;AAC9C,6BAA0B,sBAAsB,CAAC,CAAA;AAEjD,IAAM,aAAa,GAAG,CAAC,GAAG,IAAI,GAAG,IAAI,CAAC;AAEtC,IAAM,mBAAmB,GAAG,yEAAyE,CAAC;AAOtG;IAUI,iCAAoB,WAAwB;QAAxB,gBAAW,GAAX,WAAW,CAAa;QATpC,kBAAa,GAAG,mCAAmC,CAAC;QAOlD,iBAAY,GAAG,IAAI,mBAAY,EAAW,CAAC;IAGrD,CAAC;IAED,0CAAQ,GAAR;QACI,IAAI,CAAC,gBAAgB,EAAE,CAAC;IAC5B,CAAC;IAEO,kDAAgB,GAAxB;QAAA,iBAqBC;QApBG,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC,aAAa,GAAG,GAAG,GAAG,IAAI,CAAC,SAAS,GAAG,QAAQ,CAAC;QAC1E,IAAI,CAAC,QAAQ,GAAG,IAAI,8BAAY,CAAC,EAAE,GAAG,EAAE,IAAI,CAAC,aAAa,EAAE,SAAS,EAAE,IAAI,CAAC,yBAAyB,EAAE,EAAC,CAAC,CAAC;QAE1G,IAAI,CAAC,QAAQ,CAAC,kBAAkB,GAAG,UAAC,QAAa;YAC7C,QAAQ,CAAC,MAAM,GAAG,MAAM,CAAC;QAC7B,CAAC,CAAA;QACD,IAAI,CAAC,QAAQ,CAAC,sBAAsB,GAAG,UAAC,IAAS,EAAE,MAAW,EAAE,OAAY;YACxE,KAAI,CAAC,kBAAkB,GAAG,CAAC,KAAI,CAAC,QAAQ,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC;YAC/D,iEAAiE;QACrE,CAAC,CAAA;QAED,IAAI,CAAC,QAAQ,CAAC,iBAAiB,GAAG,UAAC,QAAa;YAC5C,KAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;YACzB,OAAO,CAAC,GAAG,CAAC,KAAI,CAAC,SAAS,CAAC,CAAC;QAChC,CAAC,CAAA;QAED,IAAI,CAAC,QAAQ,CAAC,aAAa,GAAG,UAAC,QAAa;YACxC,KAAI,CAAC,QAAQ,GAAG,IAAI,CAAC;YACrB,KAAI,CAAC,YAAY,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QACjC,CAAC,CAAA;IACL,CAAC;IAED,2DAAyB,GAAzB,UAA0B,OAAiB;QACvC,IAAI,WAAW,GAAG,OAAO,IAAI,IAAI,cAAO,EAAE,CAAC;QAC3C,WAAW,CAAC,MAAM,CAAC,eAAe,EAAE,SAAS,GAAG,IAAI,CAAC,WAAW,CAAC,cAAc,EAAE,CAAC,CAAC;QACnF,MAAM,CAAC,WAAW,CAAC;IACvB,CAAC;IArCD;QAAC,YAAK,EAAE;;8DAAA;IACR;QAAC,aAAM,EAAE;;iEAAA;IAbb;QAAC,gBAAS,CAAC;YACP,QAAQ,EAAE,kBAAkB;YAC5B,WAAW,EAAE,0CAA0C;YACvD,UAAU,EAAE,CAAC,wCAAsB,CAAC;SACvC,CAAC;;+BAAA;IA8CF,8BAAC;AAAD,CAAC,AA7CD,IA6CC;AA7CY,+BAAuB,0BA6CnC,CAAA","sourcesContent":["import {Component, OnInit, Input, Output, EventEmitter} from \"@angular/core\";\r\nimport { FILE_UPLOAD_DIRECTIVES, FileUploader, FileSelectDirective} from 'ng2-file-upload';\r\nimport { Http, Headers } from \"@angular/http\";\r\nimport {AuthService} from \"../auth/auth.service\";\r\n\r\nconst MAX_FILE_SIZE = 3 * 1024 * 1024;\r\n\r\nconst DOCX_FILE_MIME_TYPE = 'application/vnd.openxmlformats-officedocument.wordprocessingml.document';\r\n\r\n@Component({\r\n    selector: 'file-upload-form',\r\n    templateUrl: 'app/file/file-upload-form.component.html',\r\n    directives: [FILE_UPLOAD_DIRECTIVES]\r\n})\r\nexport class FileUploadFormComponent implements OnInit {\r\n    private fileUploadURL = 'http://localhost:8080/api/project';\r\n    public uploader: FileUploader;\r\n    isFileSizeTooLarge: boolean;\r\n    isFileTypeInvalid: boolean;\r\n    private fileItem: any;\r\n\r\n    @Input() projectId: number;\r\n    @Output() newFileAdded = new EventEmitter<boolean>();\r\n\r\n    constructor(private authService: AuthService) {\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.initFileUploader();\r\n    }\r\n\r\n    private initFileUploader() {\r\n        this.fileUploadURL = this.fileUploadURL + '/' + this.projectId + '/files';\r\n        this.uploader = new FileUploader({ url: this.fileUploadURL, authToken: this.createAuthorizationHeader()});\r\n\r\n        this.uploader.onBeforeUploadItem = (fileItem: any) => {\r\n            fileItem.method = 'POST';\r\n        }\r\n        this.uploader.onWhenAddingFileFailed = (item: any, filter: any, options: any) => {\r\n            this.isFileSizeTooLarge = !this.uploader._fileSizeFilter(item);\r\n            // this.isFileTypeInvalid = !this.uploader._mimeTypeFilter(item);\r\n        }\r\n\r\n        this.uploader.onAfterAddingFile = (fileItem: any) => {\r\n            this.fileItem = fileItem;\r\n            console.log(this.projectId);\r\n        }\r\n\r\n        this.uploader.onSuccessItem = (fileItem: any) => {\r\n            this.fileItem = null;\r\n            this.newFileAdded.emit(true);\r\n        }\r\n    }\r\n\r\n    createAuthorizationHeader(headers?: Headers): Headers {\r\n        let authHeaders = headers || new Headers();\r\n        authHeaders.append('Authorization', 'Bearer ' + this.authService.getAccessToken());\r\n        return authHeaders;\r\n    }\r\n}"]}