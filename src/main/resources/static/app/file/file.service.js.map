{"version":3,"file":"file.service.js","sourceRoot":"","sources":["file:///C:/Users/gratsielazhelyazkova/workspace/time-tracker-frontend/tmp/broccoli_type_script_compiler-input_base_path-26SQqwme.tmp/0/src/app/file/file.service.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,qBAAyB,eAAe,CAAC,CAAA;AACzC,qBAA8B,eAAe,CAAC,CAAA;AAC9C,6BAA0B,sBAAsB,CAAC,CAAA;AACjD,wBAAsB,WAAW,CAAC,CAAA;AAClC,QAAO,SAAS,CAAC,CAAA;AAGjB;IAGI,qBAAoB,IAAU,EAAU,WAAwB;QAA5C,SAAI,GAAJ,IAAI,CAAM;QAAU,gBAAW,GAAX,WAAW,CAAa;QAFxD,eAAU,GAAG,oCAAoC,CAAC;IAG1D,CAAC;IAED,gDAA0B,GAA1B,UAA2B,SAAiB;QACxC,IAAI,cAAc,GAAG,IAAI,CAAC,UAAU,GAAG,OAAI,SAAS,CAAE,GAAG,QAAQ,CAAC;QAClE,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,cAAc,EAAE;YACjC,OAAO,EAAE,IAAI,CAAC,yBAAyB,EAAE;SAC5C,CAAC;aACG,GAAG,CAAC,UAAA,QAAQ,IAAI,OAAA,QAAQ,CAAC,IAAI,EAAE,EAAf,CAAe,CAAC;aAChC,GAAG,CAAC,UAAA,KAAK,IAAI,OAAA,KAAK,CAAC,GAAG,CACnB,UAAA,OAAO,IAAI,OAAA,iBAAO,CAAC,yBAAyB,CAAC,OAAO,CAAC,EAA1C,CAA0C,CACxD,EAFa,CAEb,CAAC;aACD,SAAS,EAAE,CAAC;IACrB,CAAC;IAED,kDAA4B,GAA5B,UAA6B,QAAgB,EAAE,SAAiB;QAC5D,IAAI,aAAa,GAAG,IAAI,CAAC,UAAU,GAAG,OAAI,SAAS,CAAE,GAAG,OAAI,QAAQ,CAAE,CAAC;QACvE,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,aAAa,EAAE;YACnC,OAAO,EAAE,IAAI,CAAC,yBAAyB,EAAE;SAC5C,CAAC;aACG,GAAG,CAAC,UAAA,QAAQ,IAAI,OAAA,QAAQ,CAAC,IAAI,EAAE,EAAf,CAAe,CAAC;aAChC,SAAS,EAAE,CAAC;IACrB,CAAC;IAED,+CAAyB,GAAzB,UAA0B,OAAiB;QACvC,IAAI,WAAW,GAAG,OAAO,IAAI,IAAI,cAAO,EAAE,CAAC;QAC3C,WAAW,CAAC,MAAM,CAAC,eAAe,EAAE,SAAS,GAAG,IAAI,CAAC,WAAW,CAAC,cAAc,EAAE,CAAC,CAAC;QACnF,MAAM,CAAC,WAAW,CAAC;IACvB,CAAC;IAhCL;QAAC,iBAAU,EAAE;;mBAAA;IAkCb,kBAAC;AAAD,CAAC,AAjCD,IAiCC;AAjCY,mBAAW,cAiCvB,CAAA","sourcesContent":["import {Injectable} from \"@angular/core\";\r\nimport { Http, Headers } from \"@angular/http\";\r\nimport {AuthService} from \"../auth/auth.service\";\r\nimport {DocFile} from \"./docfile\";\r\nimport 'rxjs/Rx';\r\n\r\n@Injectable()\r\nexport class FileService {\r\n    private serviceUrl = 'http://localhost:8080/api/projects';\r\n\r\n    constructor(private http: Http, private authService: AuthService) {\r\n    }\r\n\r\n    getAllFileNamesByProjectId(projectId: number): Promise<DocFile[]> {\r\n        let getAllFilesUrl = this.serviceUrl + `/${projectId}` + '/files';\r\n        return this.http.get(getAllFilesUrl, {\r\n            headers: this.createAuthorizationHeader()\r\n        })\r\n            .map(response => response.json())\r\n            .map(files => files.map(\r\n                docFile => DocFile.parseInputObjectToDocFile(docFile)\r\n            ))\r\n            .toPromise();\r\n    }\r\n\r\n    deleteFileByNameAndProjectId(fileName: String, projectId: number): Promise<DocFile> {\r\n        let deleteFileUrl = this.serviceUrl + `/${projectId}` + `/${fileName}`;\r\n        return this.http.delete(deleteFileUrl, {\r\n            headers: this.createAuthorizationHeader()\r\n        })\r\n            .map(response => response.json())\r\n            .toPromise();\r\n    }\r\n\r\n    createAuthorizationHeader(headers?: Headers): Headers {\r\n        let authHeaders = headers || new Headers();\r\n        authHeaders.append('Authorization', 'Bearer ' + this.authService.getAccessToken());\r\n        return authHeaders;\r\n    }\r\n\r\n}"]}