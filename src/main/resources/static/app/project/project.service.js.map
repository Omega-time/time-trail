{"version":3,"file":"project.service.js","sourceRoot":"","sources":["file:///C:/Users/Bogomil Dimitrov/WebstormProjects/PaysafeInternsTimeTracking/tmp/broccoli_type_script_compiler-input_base_path-vRSVGPNd.tmp/0/src/app/project/project.service.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,qBAAyB,eAAe,CAAC,CAAA;AACzC,qBAAqB,eAAe,CAAC,CAAA;AACrC,wBAAsB,WAAW,CAAC,CAAA;AAClC,QAAO,SAAS,CAAC,CAAA;AAEjB;;;;;;GAMG;AAEH;IAGI,wBAAoB,IAAU;QAAV,SAAI,GAAJ,IAAI,CAAM;QAFtB,eAAU,GAAG,WAAW,CAAC;IAGjC,CAAC;IAED;;;OAGG;IACH,uCAAc,GAAd;QACI,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,UAAU,CAAC;aAChC,GAAG,CAAC,UAAA,QAAQ,IAAI,OAAA,QAAQ,CAAC,IAAI,EAAE,EAAf,CAAe,CAAC;aAChC,GAAG,CAAC,UAAA,QAAQ,IAAI,OAAA,QAAQ,CAAC,GAAG,CACzB,UAAA,OAAO,IAAI,OAAA,iBAAO,CAAC,yBAAyB,CAAC,OAAO,CAAC,EAA1C,CAA0C,CACxD,EAFgB,CAEhB,CAAC;aACD,SAAS,EAAE,CAAC;IACrB,CAAC;IAED;;;;OAIG;IACH,uCAAc,GAAd,UAAe,EAAU;QACrB,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,UAAU,GAAG,OAAI,EAAE,CAAE,CAAC;aAC3C,GAAG,CAAC,UAAA,QAAQ,IAAI,OAAA,QAAQ,CAAC,IAAI,EAAE,EAAf,CAAe,CAAC;aAChC,GAAG,CAAC,UAAA,OAAO,IAAI,OAAA,iBAAO,CAAC,yBAAyB,CAAC,OAAO,CAAC,EAA1C,CAA0C,CAAC;aAC1D,SAAS,EAAE,CAAC;IACrB,CAAC;IAED;;;;;OAKG;IACH,oCAAW,GAAX,UAAY,OAAe;QACvB,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,UAAU,EAAE,OAAO,CAAC;aAC1C,GAAG,CAAC,UAAA,QAAQ,IAAI,OAAA,QAAQ,CAAC,IAAI,EAAE,EAAf,CAAe,CAAC;aAChC,SAAS,EAAE,CAAC;IACrB,CAAC;IA1CL;QAAC,iBAAU,EAAE;;sBAAA;IA2Cb,qBAAC;AAAD,CAAC,AA1CD,IA0CC;AA1CY,sBAAc,iBA0C1B,CAAA","sourcesContent":["import {Injectable} from \"@angular/core\";\r\nimport { Http } from \"@angular/http\";\r\nimport {Project} from \"./project\";\r\nimport 'rxjs/Rx';\r\n\r\n/**\r\n * Class which handles all HTTP requests to the\r\n * business layer. It stores and retrieves {@link Project}\r\n * objects. Uses map method to parse JSON strings to Project\r\n * instances.\r\n * @class\r\n */\r\n@Injectable()\r\nexport class ProjectService {\r\n    private serviceUrl = '/projects';\r\n\r\n    constructor(private http: Http) {\r\n    }\r\n\r\n    /**\r\n     * Retrieves all projects from the business layer.\r\n     * @returns {Promise<Project[]>} a promise which holds an array of Project objects\r\n     */\r\n    getAllProjects(): Promise<Project[]> {\r\n        return this.http.get(this.serviceUrl)\r\n            .map(response => response.json())\r\n            .map(projects => projects.map(\r\n                project => Project.parseInputObjectToProject(project)\r\n            ))\r\n            .toPromise();\r\n    }\r\n\r\n    /**\r\n     * Retrieves a single project object by a given id.\r\n     * @param id the id by which it searches\r\n     * @returns {Promise<Project>} a promise which holds a single project object\r\n     */\r\n    getProjectById(id: number): Promise<Project> {\r\n        return this.http.get(this.serviceUrl + `/${id}`)\r\n            .map(response => response.json())\r\n            .map(project => Project.parseInputObjectToProject(project))\r\n            .toPromise();\r\n    }\r\n\r\n    /**\r\n     * Stores a project in the business layer.\r\n     * @param project the project to be stored\r\n     * @returns {Promise<Object>} a promise which holds an anonymous object\r\n     *                            which holds the new project id\r\n     */\r\n    saveProject(project:Project): Promise<Object> {\r\n        return this.http.post(this.serviceUrl, project)\r\n            .map(response => response.json())\r\n            .toPromise();\r\n    }\r\n}"]}