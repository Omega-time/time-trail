{"version":3,"file":"project.service.js","sourceRoot":"","sources":["file:///C:/Users/Bogomil Dimitrov/WebstormProjects/PaysafeInternsTimeTracking/tmp/broccoli_type_script_compiler-input_base_path-zea9Kagh.tmp/0/src/app/project/project.service.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,qBAAyB,eAAe,CAAC,CAAA;AACzC,qBAA4B,eAAe,CAAC,CAAA;AAC5C,wBAAsB,WAAW,CAAC,CAAA;AAClC,QAAO,SAAS,CAAC,CAAA;AACjB,6BAA0B,sBAAsB,CAAC,CAAA;AAGjD;;;;;;GAMG;AAEH;IAII,wBAAoB,IAAU,EAAU,WAAwB;QAA5C,SAAI,GAAJ,IAAI,CAAM;QAAU,gBAAW,GAAX,WAAW,CAAa;QAHxD,YAAO,GAAG,EAAE,CAAC;QACb,eAAU,GAAG,IAAI,CAAC,OAAO,GAAG,eAAe,CAAC;IAGpD,CAAC;IAED,kDAAyB,GAAzB,UAA0B,OAAiB;QACzC,IAAI,WAAW,GAAG,OAAO,IAAI,IAAI,cAAO,EAAE,CAAC;QAC3C,WAAW,CAAC,MAAM,CAAC,eAAe,EAAE,SAAS,GAAG,IAAI,CAAC,WAAW,CAAC,cAAc,EAAE,CAAC,CAAC;QACnF,MAAM,CAAC,WAAW,CAAC;IACrB,CAAC;IAED;;;OAGG;IACH,uCAAc,GAAd;QACI,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,UAAU,EAAE;YAChC,OAAO,EAAE,IAAI,CAAC,yBAAyB,EAAE;SAC1C,CAAC;aACH,GAAG,CAAC,UAAA,QAAQ,IAAI,OAAA,QAAQ,CAAC,IAAI,EAAE,EAAf,CAAe,CAAC;aAChC,GAAG,CAAC,UAAA,QAAQ,IAAI,OAAA,QAAQ,CAAC,GAAG,CAC3B,UAAA,OAAO,IAAI,OAAA,iBAAO,CAAC,yBAAyB,CAAC,OAAO,CAAC,EAA1C,CAA0C,CACtD,EAFgB,CAEhB,CAAC;aACC,SAAS,EAAE,CAAC;IACrB,CAAC;IAED;;;;OAIG;IACH,uCAAc,GAAd,UAAe,EAAU;QACrB,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,UAAU,GAAG,OAAI,EAAE,CAAE,EAAE;YAC3C,OAAO,EAAE,IAAI,CAAC,yBAAyB,EAAE;SAC1C,CAAC;aACD,GAAG,CAAC,UAAA,QAAQ,IAAI,OAAA,QAAQ,CAAC,IAAI,EAAE,EAAf,CAAe,CAAC;aAChC,GAAG,CAAC,UAAA,OAAO,IAAI,OAAA,iBAAO,CAAC,yBAAyB,CAAC,OAAO,CAAC,EAA1C,CAA0C,CAAC;aAC1D,SAAS,EAAE,CAAC;IACrB,CAAC;IAED;;;;;OAKG;IACH,oCAAW,GAAX,UAAY,OAAe;QACvB,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,UAAU,EAAE,OAAO,EAAE;YAC1C,OAAO,EAAE,IAAI,CAAC,yBAAyB,EAAE;SAC1C,CAAC;aACD,GAAG,CAAC,UAAA,QAAQ,IAAI,OAAA,QAAQ,CAAC,IAAI,EAAE,EAAf,CAAe,CAAC;aAChC,SAAS,EAAE,CAAC;IACrB,CAAC;IAvDL;QAAC,iBAAU,EAAE;;sBAAA;IAwDb,qBAAC;AAAD,CAAC,AAvDD,IAuDC;AAvDY,sBAAc,iBAuD1B,CAAA","sourcesContent":["import {Injectable} from \"@angular/core\";\nimport {Http, Headers} from \"@angular/http\";\nimport {Project} from \"./project\";\nimport 'rxjs/Rx';\nimport {AuthService} from \"../auth/auth.service\";\nimport {Observable} from \"rxjs\";\n\n/**\n * Class which handles all HTTP requests to the\n * business layer. It stores and retrieves {@link Project}\n * objects. Uses map method to parse JSON strings to Project\n * instances.\n * @class\n */\n@Injectable()\nexport class ProjectService {\n    private baseUrl = '';\n    private serviceUrl = this.baseUrl + '/api/projects';\n\n    constructor(private http: Http, private authService: AuthService) {\n    }\n\n    createAuthorizationHeader(headers?: Headers): Headers {\n      let authHeaders = headers || new Headers();\n      authHeaders.append('Authorization', 'Bearer ' + this.authService.getAccessToken());\n      return authHeaders;\n    }\n\n    /**\n     * Retrieves all projects from the business layer.\n     * @returns {Promise<Project[]>} a promise which holds an array of Project objects\n     */\n    getAllProjects(): Promise<Project[]> {\n        return this.http.get(this.serviceUrl, {\n              headers: this.createAuthorizationHeader()\n            })\n          .map(response => response.json())\n          .map(projects => projects.map(\n            project => Project.parseInputObjectToProject(project)\n          ))\n            .toPromise();\n    }\n\n    /**\n     * Retrieves a single project object by a given id.\n     * @param id the id by which it searches\n     * @returns {Promise<Project>} a promise which holds a single project object\n     */\n    getProjectById(id: number): Promise<Project> {\n        return this.http.get(this.serviceUrl + `/${id}`, {\n              headers: this.createAuthorizationHeader()\n            })\n            .map(response => response.json())\n            .map(project => Project.parseInputObjectToProject(project))\n            .toPromise();\n    }\n\n    /**\n     * Stores a project in the business layer.\n     * @param project the project to be stored\n     * @returns {Promise<Object>} a promise which holds an anonymous object\n     *                            which holds the new project id\n     */\n    saveProject(project:Project): Promise<Object> {\n        return this.http.post(this.serviceUrl, project, {\n              headers: this.createAuthorizationHeader()\n            })\n            .map(response => response.json())\n            .toPromise();\n    }\n}\n"]}