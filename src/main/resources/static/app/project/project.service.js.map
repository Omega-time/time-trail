{"version":3,"file":"project.service.js","sourceRoot":"","sources":["file:///C:/Users/gratsielazhelyazkova/workspace/time-tracker-frontend/tmp/broccoli_type_script_compiler-input_base_path-26SQqwme.tmp/0/src/app/project/project.service.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,qBAAyB,eAAe,CAAC,CAAA;AACzC,qBAA4B,eAAe,CAAC,CAAA;AAC5C,wBAAsB,WAAW,CAAC,CAAA;AAClC,QAAO,SAAS,CAAC,CAAA;AACjB,6BAA0B,sBAAsB,CAAC,CAAA;AAGjD;;;;;;GAMG;AAEH;IAGI,wBAAoB,IAAU,EAAU,WAAwB;QAA5C,SAAI,GAAJ,IAAI,CAAM;QAAU,gBAAW,GAAX,WAAW,CAAa;QAFxD,uBAAkB,GAAE,oCAAoC,CAAC;IAGjE,CAAC;IAED,kDAAyB,GAAzB,UAA0B,OAAiB;QACzC,IAAI,WAAW,GAAG,OAAO,IAAI,IAAI,cAAO,EAAE,CAAC;QAC3C,WAAW,CAAC,MAAM,CAAC,eAAe,EAAE,SAAS,GAAG,IAAI,CAAC,WAAW,CAAC,cAAc,EAAE,CAAC,CAAC;QACnF,MAAM,CAAC,WAAW,CAAC;IACrB,CAAC;IAED;;;OAGG;IACH,uCAAc,GAAd;QACI,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,kBAAkB,EAAE;YACxC,OAAO,EAAE,IAAI,CAAC,yBAAyB,EAAE;SAC1C,CAAC;aACD,GAAG,CAAC,UAAA,QAAQ,IAAI,OAAA,QAAQ,CAAC,IAAI,EAAE,EAAf,CAAe,CAAC;aAChC,GAAG,CAAC,UAAA,QAAQ,IAAI,OAAA,QAAQ,CAAC,GAAG,CACzB,UAAA,OAAO,IAAI,OAAA,iBAAO,CAAC,yBAAyB,CAAC,OAAO,CAAC,EAA1C,CAA0C,CACxD,EAFgB,CAEhB,CAAC;aACD,SAAS,EAAE,CAAC;IACrB,CAAC;IAED;;;;OAIG;IACH,uCAAc,GAAd,UAAe,EAAU;QACrB,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,kBAAkB,GAAG,OAAI,EAAE,CAAE,EAAE;YACnD,OAAO,EAAE,IAAI,CAAC,yBAAyB,EAAE;SAC1C,CAAC;aACD,GAAG,CAAC,UAAA,QAAQ,IAAI,OAAA,QAAQ,CAAC,IAAI,EAAE,EAAf,CAAe,CAAC;aAChC,GAAG,CAAC,UAAA,OAAO,IAAI,OAAA,iBAAO,CAAC,yBAAyB,CAAC,OAAO,CAAC,EAA1C,CAA0C,CAAC;aAC1D,SAAS,EAAE,CAAC;IACrB,CAAC;IAED;;;;;;OAMG;IACH,0CAAiB,GAAjB,UAAkB,EAAU;QACxB,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,kBAAkB,GAAG,OAAI,EAAE,CAAE,EAAE;YACtD,OAAO,EAAE,IAAI,CAAC,yBAAyB,EAAE;SAC1C,CAAC;aACD,GAAG,CAAC,UAAA,QAAQ,IAAI,OAAA,QAAQ,CAAC,IAAI,EAAE,EAAf,CAAe,CAAC;aAChC,SAAS,EAAE,CAAC;IACrB,CAAC;IAED;;;;;OAKG;IACH,oCAAW,GAAX,UAAY,OAAgB;QACxB,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,kBAAkB,EAAE,OAAO,EAAE;YAClD,OAAO,EAAE,IAAI,CAAC,yBAAyB,EAAE;SAC1C,CAAC;aACD,GAAG,CAAC,UAAA,QAAQ,IAAI,OAAA,QAAQ,CAAC,IAAI,EAAE,EAAf,CAAe,CAAC;aAChC,SAAS,EAAE,CAAC;IACrB,CAAC;IArEL;QAAC,iBAAU,EAAE;;sBAAA;IAsEb,qBAAC;AAAD,CAAC,AArED,IAqEC;AArEY,sBAAc,iBAqE1B,CAAA","sourcesContent":["import {Injectable} from \"@angular/core\";\r\nimport {Http, Headers} from \"@angular/http\";\r\nimport {Project} from \"./project\";\r\nimport 'rxjs/Rx';\r\nimport {AuthService} from \"../auth/auth.service\";\r\nimport {Observable} from \"rxjs\";\r\n\r\n/**\r\n * Class which handles all HTTP requests to the\r\n * business layer. It stores and retrieves {@link Project}\r\n * objects. Uses map method to parse JSON strings to Project\r\n * instances.\r\n * @class\r\n */\r\n@Injectable()\r\nexport class ProjectService {\r\n    private projectsServiceUrl= 'http://localhost:8080/api/projects';\t\r\n\r\n    constructor(private http: Http, private authService: AuthService) {\r\n    }\r\n\r\n    createAuthorizationHeader(headers?: Headers): Headers {\r\n      let authHeaders = headers || new Headers();\r\n      authHeaders.append('Authorization', 'Bearer ' + this.authService.getAccessToken());\r\n      return authHeaders;\r\n    }\r\n\r\n    /**\r\n     * Retrieves all projects from the business layer.\r\n     * @returns {Promise<Project[]>} a promise which holds an array of Project objects\r\n     */\r\n    getAllProjects(): Promise<Project[]> {\r\n        return this.http.get(this.projectsServiceUrl, {\r\n              headers: this.createAuthorizationHeader()\r\n            })\r\n            .map(response => response.json())\r\n            .map(projects => projects.map(\r\n                project => Project.parseInputObjectToProject(project)\r\n            ))\r\n            .toPromise();\r\n    }\r\n\r\n    /**\r\n     * Retrieves a single project object by a given id.\r\n     * @param id the id by which it searches\r\n     * @returns {Promise<Project>} a promise which holds a single project object\r\n     */\r\n    getProjectById(id: number): Promise<Project> {\r\n        return this.http.get(this.projectsServiceUrl + `/${id}`, {\r\n              headers: this.createAuthorizationHeader()\r\n            })\r\n            .map(response => response.json())\r\n            .map(project => Project.parseInputObjectToProject(project))\r\n            .toPromise();\r\n    }\r\n\r\n    /**\r\n     * Deletes a single project object by a given id.\r\n     * Deletes the tasks of the project as well.\r\n     * @param id the id by which it deletes the project and its tasks\r\n     * @returns {Promise<Object>} a promise which holds an anonymous object\r\n     *                            which holds a response.\r\n     */\r\n    deleteProjectById(id: number): Promise<Object> {\r\n        return this.http.delete(this.projectsServiceUrl + `/${id}`, {\r\n              headers: this.createAuthorizationHeader()\r\n            })\r\n            .map(response => response.json())\r\n            .toPromise();\r\n    }\r\n\r\n    /**\r\n     * Stores a project in the business layer.\r\n     * @param project the project to be stored\r\n     * @returns {Promise<Object>} a promise which holds an anonymous object\r\n     *                            which holds the new project id\r\n     */\r\n    saveProject(project: Project): Promise<Object> {\r\n        return this.http.post(this.projectsServiceUrl, project, {\r\n              headers: this.createAuthorizationHeader()\r\n            })\r\n            .map(response => response.json())\r\n            .toPromise();\r\n    }\r\n}\r\n"]}